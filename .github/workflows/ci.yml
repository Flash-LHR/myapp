name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/quarklink/images/cpp-bazel-ci:1.0.6
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 检查代码格式
      run: |
        echo "🎨 检查代码格式..."
        mkdir -p reports
        find app -name "*.c*" -o -name "*.h*" | xargs clang-format --dry-run --Werror > reports/format-check.txt 2>&1; EXIT_CODE=$?
        echo "📋 代码格式检查报告:" && cat reports/format-check.txt
        [ $EXIT_CODE -eq 0 ] && echo "✅ 代码格式检查通过" || { echo "❌ 代码格式检查失败"; exit 1; }

    - name: 生成编译数据库
      run: |
        echo "📝 生成编译数据库..."
        bazel run @hedron_compile_commands//:refresh_all

    - name: 运行静态分析
      run: |
        echo "🔍 运行静态分析..."
        find app -name "*.c*" -o -name "*.h*" | xargs clang-tidy -p . --quiet --warnings-as-errors="*" > reports/static-analysis.txt 2>&1; EXIT_CODE=$?
        echo "📋 静态分析报告:" && cat reports/static-analysis.txt
        [ $EXIT_CODE -eq 0 ] && echo "✅ 静态分析检查通过" || { echo "❌ 静态分析检查失败"; exit 1; }

    - name: 上传代码质量报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: reports/
        retention-days: 30

  build-test-coverage:
    name: 构建、测试和覆盖率
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/quarklink/images/cpp-bazel-ci:1.0.6
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 构建项目
      run: |
        echo "🔨 构建项目..."
        bazel build //app:main
        echo "✅ 项目构建成功"

    - name: 运行单元测试
      run: |
        echo "🧪 运行单元测试..."
        mkdir -p reports
        bazel test //app/... --test_output=all --test_summary=detailed > reports/unit-tests.txt 2>&1; EXIT_CODE=$?
        echo "📋 单元测试报告:" && cat reports/unit-tests.txt
        [ $EXIT_CODE -eq 0 ] && echo "✅ 单元测试通过" || { echo "❌ 单元测试失败"; exit 1; }

    - name: 生成覆盖率报告
      run: |
        echo "📊 生成覆盖率报告..."
        bazel coverage //app/... --combined_report=lcov
        echo "✅ 覆盖率报告生成完成"

    - name: 上传覆盖率到Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./bazel-out/_coverage/_coverage_report.dat
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true

    - name: 上传测试报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: reports/
        retention-days: 30
