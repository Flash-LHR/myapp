name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  code-quality-check:
    name: 代码质量检查
    runs-on: ubuntu-latest
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 安装工具
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy

    - name: 检查代码格式
      run: |
        find app -name "*.cc" -o -name "*.cpp" -o -name "*.cxx" -o -name "*.h" -o -name "*.hpp" -o -name "*.hxx" | xargs clang-format --dry-run --Werror

    - name: 设置Bazel
      uses: bazelbuild/setup-bazelisk@v3

    - name: 缓存Bazel
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/bazel
        key: ${{ runner.os }}-bazel-${{ hashFiles('MODULE.bazel', 'MODULE.bazel.lock') }}
        restore-keys: |
          ${{ runner.os }}-bazel-

    - name: 生成编译数据库
      run: |
        bazel run @hedron_compile_commands//:refresh_all

    - name: 运行静态分析
      run: |
        find app -name "*.cc" -o -name "*.cpp" -o -name "*.cxx" -o -name "*.h" -o -name "*.hpp" -o -name "*.hxx" | xargs clang-tidy -p . --quiet

  build-test-coverage:
    name: 构建、测试和覆盖率
    runs-on: ubuntu-latest
    needs: [code-quality-check]
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 设置Bazel
      uses: bazelbuild/setup-bazelisk@v3

    - name: 缓存Bazel
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/bazel
        key: ${{ runner.os }}-bazel-${{ hashFiles('MODULE.bazel', 'MODULE.bazel.lock') }}
        restore-keys: |
          ${{ runner.os }}-bazel-

    - name: 安装覆盖率工具
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov bc

    - name: 构建项目
      run: |
        bazel build //app:main

    - name: 运行单元测试
      run: |
        bazel test //app/... --test_output=all

    - name: 生成覆盖率报告
      run: |
        bazel coverage //app/... --combined_report=lcov --coverage_report_generator=@bazel_tools//tools/test/CoverageOutputGenerator/java/com/google/devtools/coverageoutputgenerator:Main

    - name: 处理覆盖率数据
      run: |
        # 生成HTML报告
        genhtml bazel-out/_coverage/_coverage_report.dat -o coverage_html
        
        # 计算覆盖率百分比
        COVERAGE=$(lcov --summary bazel-out/_coverage/_coverage_report.dat 2>&1 | grep "lines......" | awk '{print $2}' | sed 's/%//')
        echo "代码覆盖率: ${COVERAGE}%"
        
        # 检查覆盖率是否达到85%
        if (( $(echo "$COVERAGE >= 85" | bc -l) )); then
          echo "✅ 覆盖率测试通过: ${COVERAGE}% >= 85%"
        else
          echo "❌ 覆盖率测试失败: ${COVERAGE}% < 85%"
          exit 1
        fi

    - name: 上传覆盖率到Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./bazel-out/_coverage/_coverage_report.dat
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: 上传覆盖率报告
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage_html/

  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    # 与主要构建并行运行，独立进行
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 运行CodeQL分析
      uses: github/codeql-action/init@v3
      with:
        languages: cpp

    - name: 设置Bazel
      uses: bazelbuild/setup-bazelisk@v3

    - name: 缓存Bazel
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/bazel
        key: ${{ runner.os }}-bazel-${{ hashFiles('MODULE.bazel', 'MODULE.bazel.lock') }}
        restore-keys: |
          ${{ runner.os }}-bazel-

    - name: 构建项目
      run: |
        bazel build //app:main

    - name: 执行CodeQL分析
      uses: github/codeql-action/analyze@v3 
